name: Deploy Spring 

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION:     ${{ secrets.AWS_REGION }}
      ECR_REPO:       ${{ secrets.ECR_REPO }}       # e.g. howru-spring
      ECS_CLUSTER:    ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE:    ${{ secrets.ECS_SERVICE }}
      TASKDEF_FAMILY: howru-backend                 # 네 환경 기준
      # 단일 컨테이너가 아니면 지정: CONTAINER_NAME: spring-app
      FIXED_TAG: latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (Access Key)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Fetch task definition (by family)
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "$TASKDEF_FAMILY" \
            --query "taskDefinition" > taskdef.json
          jq -r '.family, .runtimePlatform, (.containerDefinitions[] | {name,image})' taskdef.json

      - name: Derive build platform from taskdef
        id: plat
        run: |
          set -euo pipefail
          ARCH=$(jq -r '.runtimePlatform.cpuArchitecture // "X86_64"' taskdef.json)
          case "$ARCH" in
            ARM64)  PLATFORM="linux/arm64" ;;
            X86_64) PLATFORM="linux/amd64" ;;
            *) echo "Unsupported cpuArchitecture: $ARCH"; exit 1 ;;
          esac
          echo "PLATFORM=$PLATFORM" >> $GITHUB_OUTPUT

      - name: Resolve container name
        id: cname
        run: |
          set -euo pipefail
          if [ -n "${{ env.CONTAINER_NAME || '' }}" ]; then
            echo "NAME=${{ env.CONTAINER_NAME }}" >> $GITHUB_OUTPUT
          else
            CNT=$(jq '.containerDefinitions | length' taskdef.json)
            if [ "$CNT" -eq 1 ]; then
              echo "NAME=$(jq -r '.containerDefinitions[0].name' taskdef.json)" >> $GITHUB_OUTPUT
            else
              echo "Multiple containers found. Set CONTAINER_NAME." >&2
              jq -r '.containerDefinitions[].name' taskdef.json >&2
              exit 2
            fi
          fi

      - name: Assert taskdef uses fixed tag
        run: |
          set -euo pipefail
          NAME="${{ steps.cname.outputs.NAME }}"
          IMG=$(jq -r --arg NAME "$NAME" '.containerDefinitions[] | select(.name==$NAME) | .image' taskdef.json)
          echo "TaskDef image: $IMG"
          case "$IMG" in
            *:${{ env.FIXED_TAG }}) echo "OK: fixed tag '${{ env.FIXED_TAG }}'";;
            *) echo "TaskDef image tag is not '${{ env.FIXED_TAG }}'. Found: $IMG. Refusing to proceed without new taskdef." >&2; exit 3;;
          esac

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image (fixed tag + optional sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ steps.plat.outputs.PLATFORM }}
          tags: |
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.FIXED_TAG }}
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Force new deployment (no new taskdef)
        run: |
          set -euo pipefail
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --force-new-deployment \
            --region "$AWS_REGION"

      - name: Wait until stable
        run: |
          aws ecs wait services-stable \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --region "$AWS_REGION"

      - name: Dump ECS events on failure
        if: failure()
        run: |
          aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --region "$AWS_REGION" \
            --query "services[0].events[0:20].[createdAt,message]" --output table
