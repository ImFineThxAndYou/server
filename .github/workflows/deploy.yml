name: Deploy Spring (no new taskdef; force redeploy)

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION:     ${{ secrets.AWS_REGION }}        # e.g. ap-northeast-2
      ECR_REPO:       ${{ secrets.ECR_REPO }}          # e.g. howru-spring
      ECS_CLUSTER:    ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE:    ${{ secrets.ECS_SERVICE }}
      TASKDEF_FAMILY: howru-backend                    # 네가 말한 family
      FIXED_TAG:      latest                           # 새 리비전 없이 배포하려면 고정 태그가 필수
      # 다중 컨테이너면 명시: CONTAINER_NAME: spring-app
      ALLOW_MIGRATE:  'true'                           # ✅ 첫 실행만 true → 성공 후 반드시 'false'로 변경

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (Access Key)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Fetch task definition (by family)
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "$TASKDEF_FAMILY" \
            --region "$AWS_REGION" \
            --query "taskDefinition" > taskdef.json
          jq -r '.family, .runtimePlatform, (.containerDefinitions[] | {name,image})' taskdef.json

      - name: Derive build platform from taskdef
        id: plat
        run: |
          set -euo pipefail
          ARCH=$(jq -r '.runtimePlatform.cpuArchitecture // "X86_64"' taskdef.json)
          case "$ARCH" in
            ARM64)  PLATFORM="linux/arm64" ;;
            X86_64) PLATFORM="linux/amd64" ;;
            *) echo "Unsupported cpuArchitecture: $ARCH"; exit 1 ;;
          esac
          echo "PLATFORM=$PLATFORM" >> $GITHUB_OUTPUT

      - name: Resolve container name
        id: cname
        run: |
          set -euo pipefail
          if [ -n "${{ env.CONTAINER_NAME || '' }}" ]; then
            echo "NAME=${{ env.CONTAINER_NAME }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          CNT=$(jq '.containerDefinitions | length' taskdef.json)
          if [ "$CNT" -eq 1 ]; then
            NAME=$(jq -r '.containerDefinitions[0].name' taskdef.json)
            echo "Auto-detected container name: $NAME"
            echo "NAME=$NAME" >> $GITHUB_OUTPUT
          else
            echo "Multiple containers found. Set CONTAINER_NAME." >&2
            jq -r '.containerDefinitions[].name' taskdef.json >&2
            exit 2
          fi

      # ONE-TIME: 태스크 정의의 이미지 태그를 :latest로 바꿔 새 리비전 등록 후 서비스에 적용
      - name: Maybe migrate taskdef image to :latest (ONE-TIME)
        if: ${{ env.ALLOW_MIGRATE == 'true' }}
        id: migrate
        run: |
          set -euo pipefail
          NAME="${{ steps.cname.outputs.NAME }}"
          CUR_IMG=$(jq -r --arg NAME "$NAME" '.containerDefinitions[] | select(.name==$NAME) | .image' taskdef.json)
          echo "Current TaskDef image: $CUR_IMG"
          if [[ "$CUR_IMG" == *":${{ env.FIXED_TAG }}" ]]; then
            echo "MIG
