name: Deploy Spring (Dockerfile → ECS)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO: ${{ secrets.ECR_REPO }}       # e.g. howru-spring
      CONTAINER_NAME: spring-app              # taskdef의 컨테이너 name과 동일해야 함
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AccessKey 사용
      - name: Configure AWS credentials (Access Key)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get current task definition ARN from service
        id: cur
        run: |
          set -euo pipefail
          ARN=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --query "services[0].taskDefinition" --output text)
          [ -n "$ARN" ] && [ "$ARN" != "None" ] || { echo "No taskDefinition"; exit 1; }
          echo "TASKDEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Export task definition JSON
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "${{ steps.cur.outputs.TASKDEF_ARN }}" \
            --query "taskDefinition" > taskdef.json
          cat taskdef.json | jq -r '.family, .runtimePlatform, (.containerDefinitions[] | {name,image})'

      # taskdef.runtimePlatform 기준으로 이미지 아키텍처 맞춤
      - name: Derive build platform
        id: plat
        run: |
          set -euo pipefail
          ARCH=$(jq -r '.runtimePlatform.cpuArchitecture // "X86_64"' taskdef.json)
          case "$ARCH" in
            ARM64)  PLATFORM="linux/arm64" ;;
            X86_64) PLATFORM="linux/amd64" ;;
            *) echo "Unsupported cpuArchitecture: $ARCH"; exit 1 ;;
          esac
          echo "PLATFORM=$PLATFORM" >> $GITHUB_OUTPUT

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image (tag = commit SHA)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ steps.plat.outputs.PLATFORM }}
          tags: ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Patch task definition image
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}"
          cat taskdef.json \
          | jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)' \
          | jq --arg IMG "$IMAGE" --arg NAME "$CONTAINER_NAME" '
              .containerDefinitions as $defs
              | ([$defs[] | select(.name==$NAME)] | length) as $hit
              | if $hit == 0 then halt_error(2; "Container not found: \($NAME)")
                else .containerDefinitions = ($defs | map(if .name==$NAME then .image=$IMG else . end))
                end
            ' > taskdef-patched.json
          jq -r '.family, .runtimePlatform, (.containerDefinitions[] | {name,image})' taskdef-patched.json

      - name: Register new task definition
        id: reg
        run: |
          set -euo pipefail
          NEW=$(aws ecs register-task-definition \
            --cli-input-json file://taskdef-patched.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "NEW_TASKDEF_ARN=$NEW" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          set -euo pipefail
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "${{ steps.reg.outputs.NEW_TASKDEF_ARN }}"

      - name: Wait until service stable
        run: |
          set -euo pipefail
          aws ecs wait services-stable \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE"

      - name: Dump ECS events on failure
        if: failure()
        run: |
          aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --query "services[0].events[0:20].[createdAt,message]" --output table
