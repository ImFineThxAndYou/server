version: "3.9"

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  libretranslate:
    image: libretranslate/libretranslate:latest
    restart: unless-stopped
    ports:
      - "5001:5000"  # 호스트 5001 → 컨테이너 5000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  spacy-api:
    build:
      context: ./spacy-api
    container_name: spacy-api
    restart: unless-stopped
    volumes:
      - ./spacy-api:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
  fastapi-api:
    build:
      context: ./fastapi-api
    container_name: fastapi-api
    restart: unless-stopped
    ports:
      - "8001:8001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
  zookeeper:
      image: bitnami/zookeeper:3.9
      container_name: zookeeper
      restart: unless-stopped
      ports:
        - "2181:2181"
      environment:
        - ALLOW_ANONYMOUS_LOGIN=yes
      networks:
        - kafka-net

  kafka:
      image: bitnami/kafka:3.7
      container_name: kafka
      restart: unless-stopped
      ports:
        - "9092:9092"   # 컨테이너 내부/다른 컨테이너용
        - "9094:9094"   # 호스트 접속용
      environment:
        # Zookeeper 연결
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181

        # 브로커 ID
        - KAFKA_BROKER_ID=1

        # Listener 설정 (컨테이너 내부와 외부 둘 다)
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:9094
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT


        # 자동 토픽 생성 허용
        - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      depends_on:
        - zookeeper
      networks:
        - kafka-net

volumes:
  pgdata:
  redisdata:

networks:
  kafka-net: